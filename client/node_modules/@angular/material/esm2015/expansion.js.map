<<<<<<< HEAD
{"version":3,"file":"expansion.js","sources":["../../packages/material/expansion/accordion.js","../../packages/material/expansion/expansion-panel.js","../../packages/material/expansion/expansion-panel-header.js","../../packages/material/expansion/expansion-module.js","../../packages/material/expansion/public-api.js","../../packages/material/expansion/index.js"],"sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, Input } from \"@angular/core\";\nimport { coerceBooleanProperty } from \"@angular/cdk/coercion\";\nimport { CdkAccordion } from \"@angular/cdk/accordion\";\n/**\n * Directive for a Material Design Accordion.\n */\nexport class MatAccordion extends CdkAccordion {\n    constructor() {\n        super(...arguments);\n        this._hideToggle = false;\n        /**\n         * The display mode used for all expansion panels in the accordion. Currently two display\n         * modes exist:\n         *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n         *     panel at a different elevation from the reset of the accordion.\n         *  flat - no spacing is placed around expanded panels, showing all panels at the same\n         *     elevation.\n         */\n        this.displayMode = 'default';\n    }\n    /**\n     * Whether the expansion indicator should be hidden.\n     * @return {?}\n     */\n    get hideToggle() { return this._hideToggle; }\n    /**\n     * @param {?} show\n     * @return {?}\n     */\n    set hideToggle(show) { this._hideToggle = coerceBooleanProperty(show); }\n}\nMatAccordion.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-accordion',\n                exportAs: 'matAccordion',\n                host: {\n                    class: 'mat-accordion'\n                }\n            },] },\n];\n/** @nocollapse */\nMatAccordion.ctorParameters = () => [];\nMatAccordion.propDecorators = {\n    \"hideToggle\": [{ type: Input },],\n    \"displayMode\": [{ type: Input },],\n};\nfunction MatAccordion_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatAccordion.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatAccordion.ctorParameters;\n    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\n    MatAccordion.propDecorators;\n    /** @type {?} */\n    MatAccordion.prototype._hideToggle;\n    /**\n     * The display mode used for all expansion panels in the accordion. Currently two display\n     * modes exist:\n     *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n     *     panel at a different elevation from the reset of the accordion.\n     *  flat - no spacing is placed around expanded panels, showing all panels at the same\n     *     elevation.\n     * @type {?}\n     */\n    MatAccordion.prototype.displayMode;\n}\n//# sourceMappingURL=accordion.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger } from \"@angular/animations\";\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, forwardRef, Host, Input, Optional, ViewEncapsulation, } from \"@angular/core\";\nimport { CdkAccordionItem } from \"@angular/cdk/accordion\";\nimport { UniqueSelectionDispatcher } from \"@angular/cdk/collections\";\nimport { mixinDisabled } from \"@angular/material/core\";\nimport { Subject } from \"rxjs/Subject\";\nimport { MatAccordion } from \"./accordion\";\nimport { coerceBooleanProperty } from \"@angular/cdk/coercion\";\n/**\n * Time and timing curve for expansion panel animations.\n */\nexport const /** @type {?} */ EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * \\@docs-private\n */\nexport class MatExpansionPanelBase extends CdkAccordionItem {\n    /**\n     * @param {?} accordion\n     * @param {?} _changeDetectorRef\n     * @param {?} _uniqueSelectionDispatcher\n     */\n    constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher) {\n        super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    }\n}\nMatExpansionPanelBase.decorators = [\n    { type: Component, args: [{\n                template: '',encapsulation: ViewEncapsulation.None,\n                preserveWhitespaces: false,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nMatExpansionPanelBase.ctorParameters = () => [\n    { type: MatAccordion, },\n    { type: ChangeDetectorRef, },\n    { type: UniqueSelectionDispatcher, },\n];\nfunction MatExpansionPanelBase_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatExpansionPanelBase.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatExpansionPanelBase.ctorParameters;\n}\nexport const /** @type {?} */ _MatExpansionPanelMixinBase = mixinDisabled(MatExpansionPanelBase);\n/**\n * <mat-expansion-panel> component.\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MdAccordion directive attached.\n *\n * Please refer to README.md for examples on how to use it.\n */\nexport class MatExpansionPanel extends _MatExpansionPanelMixinBase {\n    /**\n     * @param {?} accordion\n     * @param {?} _changeDetectorRef\n     * @param {?} _uniqueSelectionDispatcher\n     */\n    constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher) {\n        super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n        this._hideToggle = false;\n        /**\n         * Stream that emits for changes in `\\@Input` properties.\n         */\n        this._inputChanges = new Subject();\n        this.accordion = accordion;\n    }\n    /**\n     * Whether the toggle indicator should be hidden.\n     * @return {?}\n     */\n    get hideToggle() {\n        return this._hideToggle;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hideToggle(value) {\n        this._hideToggle = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the expansion indicator should be hidden.\n     * @return {?}\n     */\n    _getHideToggle() {\n        if (this.accordion) {\n            return this.accordion.hideToggle;\n        }\n        return this.hideToggle;\n    }\n    /**\n     * Determines whether the expansion panel should have spacing between it and its siblings.\n     * @return {?}\n     */\n    _hasSpacing() {\n        if (this.accordion) {\n            return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n        }\n        return false;\n    }\n    /**\n     * Gets the expanded state string.\n     * @return {?}\n     */\n    _getExpandedState() {\n        return this.expanded ? 'expanded' : 'collapsed';\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this._inputChanges.next(changes);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._inputChanges.complete();\n    }\n}\nMatExpansionPanel.decorators = [\n    { type: Component, args: [{styles: [\".mat-expansion-panel{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);box-sizing:content-box;display:block;margin:0;transition:margin 225ms cubic-bezier(.4,0,.2,1)}.mat-expansion-panel:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-expanded .mat-expansion-panel-content{overflow:visible}.mat-expansion-panel-content,.mat-expansion-panel-content.ng-animating{overflow:hidden}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion .mat-expansion-panel-spacing:first-child{margin-top:0}.mat-accordion .mat-expansion-panel-spacing:last-child{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button{margin-left:0;margin-right:8px}\"],\n                selector: 'mat-expansion-panel',\n                exportAs: 'matExpansionPanel',\n                template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content><div [class.mat-expanded]=\\\"expanded\\\" class=\\\"mat-expansion-panel-content\\\" [@bodyExpansion]=\\\"_getExpandedState()\\\" [id]=\\\"id\\\"><div class=\\\"mat-expansion-panel-body\\\"><ng-content></ng-content></div><ng-content select=\\\"mat-action-row\\\"></ng-content></div>\",\n                encapsulation: ViewEncapsulation.None,\n                preserveWhitespaces: false,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disabled', 'expanded'],\n                outputs: ['opened', 'closed'],\n                host: {\n                    'class': 'mat-expansion-panel',\n                    '[class.mat-expanded]': 'expanded',\n                    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n                },\n                providers: [\n                    { provide: _MatExpansionPanelMixinBase, useExisting: forwardRef(() => MatExpansionPanel) }\n                ],\n                animations: [\n                    trigger('bodyExpansion', [\n                        state('collapsed', style({ height: '0px', visibility: 'hidden' })),\n                        state('expanded', style({ height: '*', visibility: 'visible' })),\n                        transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n                    ]),\n                ],\n            },] },\n];\n/** @nocollapse */\nMatExpansionPanel.ctorParameters = () => [\n    { type: MatAccordion, decorators: [{ type: Optional }, { type: Host },] },\n    { type: ChangeDetectorRef, },\n    { type: UniqueSelectionDispatcher, },\n];\nMatExpansionPanel.propDecorators = {\n    \"hideToggle\": [{ type: Input },],\n};\nfunction MatExpansionPanel_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatExpansionPanel.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatExpansionPanel.ctorParameters;\n    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\n    MatExpansionPanel.propDecorators;\n    /** @type {?} */\n    MatExpansionPanel.prototype._hideToggle;\n    /**\n     * Stream that emits for changes in `\\@Input` properties.\n     * @type {?}\n     */\n    MatExpansionPanel.prototype._inputChanges;\n    /**\n     * Optionally defined accordion the expansion panel belongs to.\n     * @type {?}\n     */\n    MatExpansionPanel.prototype.accordion;\n}\nexport class MatExpansionPanelActionRow {\n}\nMatExpansionPanelActionRow.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-action-row',\n                host: {\n                    class: 'mat-action-row'\n                }\n            },] },\n];\n/** @nocollapse */\nMatExpansionPanelActionRow.ctorParameters = () => [];\nfunction MatExpansionPanelActionRow_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatExpansionPanelActionRow.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatExpansionPanelActionRow.ctorParameters;\n}\n//# sourceMappingURL=expansion-panel.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger } from \"@angular/animations\";\nimport { FocusMonitor } from \"@angular/cdk/a11y\";\nimport { ENTER, SPACE } from \"@angular/cdk/keycodes\";\nimport { filter } from \"rxjs/operators/filter\";\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, ElementRef, Host, Input, ViewEncapsulation, } from \"@angular/core\";\nimport { merge } from \"rxjs/observable/merge\";\nimport { Subscription } from \"rxjs/Subscription\";\nimport { EXPANSION_PANEL_ANIMATION_TIMING, MatExpansionPanel } from \"./expansion-panel\";\n/**\n * <mat-expansion-panel-header> component.\n *\n * This component corresponds to the header element of an <mat-expansion-panel>.\n *\n * Please refer to README.md for examples on how to use it.\n */\nexport class MatExpansionPanelHeader {\n    /**\n     * @param {?} panel\n     * @param {?} _element\n     * @param {?} _focusMonitor\n     * @param {?} _changeDetectorRef\n     */\n    constructor(panel, _element, _focusMonitor, _changeDetectorRef) {\n        this.panel = panel;\n        this._element = _element;\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._parentChangeSubscription = Subscription.EMPTY;\n        // Since the toggle state depends on an @Input on the panel, we\n        // need to  subscribe and trigger change detection manually.\n        this._parentChangeSubscription = merge(panel.opened, panel.closed, panel._inputChanges.pipe(filter(changes => !!(changes[\"hideToggle\"] || changes[\"disabled\"]))))\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n        _focusMonitor.monitor(_element.nativeElement, false);\n    }\n    /**\n     * Toggles the expanded state of the panel.\n     * @return {?}\n     */\n    _toggle() {\n        if (!this.panel.disabled) {\n            this.panel.toggle();\n        }\n    }\n    /**\n     * Gets whether the panel is expanded.\n     * @return {?}\n     */\n    _isExpanded() {\n        return this.panel.expanded;\n    }\n    /**\n     * Gets the expanded state string of the panel.\n     * @return {?}\n     */\n    _getExpandedState() {\n        return this.panel._getExpandedState();\n    }\n    /**\n     * Gets the panel id.\n     * @return {?}\n     */\n    _getPanelId() {\n        return this.panel.id;\n    }\n    /**\n     * Gets whether the expand indicator should be shown.\n     * @return {?}\n     */\n    _showToggle() {\n        return !this.panel.hideToggle && !this.panel.disabled;\n    }\n    /**\n     * Handle keyup event calling to toggle() if appropriate.\n     * @param {?} event\n     * @return {?}\n     */\n    _keyup(event) {\n        switch (event.keyCode) {\n            // Toggle for space and enter keys.\n            case SPACE:\n            case ENTER:\n                event.preventDefault();\n                this._toggle();\n                break;\n            default:\n                return;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._parentChangeSubscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this._element.nativeElement);\n    }\n}\nMatExpansionPanelHeader.decorators = [\n    { type: Component, args: [{selector: 'mat-expansion-panel-header',\n                styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:0}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-description,.mat-expansion-panel-header-title{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-description,[dir=rtl] .mat-expansion-panel-header-title{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:'';display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}\"],\n                template: \"<span class=\\\"mat-content\\\"><ng-content select=\\\"mat-panel-title\\\"></ng-content><ng-content select=\\\"mat-panel-description\\\"></ng-content><ng-content></ng-content></span><span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\" class=\\\"mat-expansion-indicator\\\"></span>\",\n                encapsulation: ViewEncapsulation.None,\n                preserveWhitespaces: false,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-expansion-panel-header',\n                    'role': 'button',\n                    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n                    '[attr.aria-controls]': '_getPanelId()',\n                    '[attr.aria-expanded]': '_isExpanded()',\n                    '[attr.aria-disabled]': 'panel.disabled',\n                    '[class.mat-expanded]': '_isExpanded()',\n                    '(click)': '_toggle()',\n                    '(keyup)': '_keyup($event)',\n                    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n                },\n                animations: [\n                    trigger('indicatorRotate', [\n                        state('collapsed', style({ transform: 'rotate(0deg)' })),\n                        state('expanded', style({ transform: 'rotate(180deg)' })),\n                        transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n                    ]),\n                    trigger('expansionHeight', [\n                        state('collapsed', style({\n                            height: '{{collapsedHeight}}',\n                        }), {\n                            params: { collapsedHeight: '48px' },\n                        }),\n                        state('expanded', style({\n                            height: '{{expandedHeight}}'\n                        }), {\n                            params: { expandedHeight: '64px' }\n                        }),\n                        transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n                    ]),\n                ],\n            },] },\n];\n/** @nocollapse */\nMatExpansionPanelHeader.ctorParameters = () => [\n    { type: MatExpansionPanel, decorators: [{ type: Host },] },\n    { type: ElementRef, },\n    { type: FocusMonitor, },\n    { type: ChangeDetectorRef, },\n];\nMatExpansionPanelHeader.propDecorators = {\n    \"expandedHeight\": [{ type: Input },],\n    \"collapsedHeight\": [{ type: Input },],\n};\nfunction MatExpansionPanelHeader_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatExpansionPanelHeader.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatExpansionPanelHeader.ctorParameters;\n    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\n    MatExpansionPanelHeader.propDecorators;\n    /** @type {?} */\n    MatExpansionPanelHeader.prototype._parentChangeSubscription;\n    /**\n     * Height of the header while the panel is expanded.\n     * @type {?}\n     */\n    MatExpansionPanelHeader.prototype.expandedHeight;\n    /**\n     * Height of the header while the panel is collapsed.\n     * @type {?}\n     */\n    MatExpansionPanelHeader.prototype.collapsedHeight;\n    /** @type {?} */\n    MatExpansionPanelHeader.prototype.panel;\n    /** @type {?} */\n    MatExpansionPanelHeader.prototype._element;\n    /** @type {?} */\n    MatExpansionPanelHeader.prototype._focusMonitor;\n    /** @type {?} */\n    MatExpansionPanelHeader.prototype._changeDetectorRef;\n}\n/**\n * <mat-panel-description> directive.\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\nexport class MatExpansionPanelDescription {\n}\nMatExpansionPanelDescription.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-panel-description',\n                host: {\n                    class: 'mat-expansion-panel-header-description'\n                }\n            },] },\n];\n/** @nocollapse */\nMatExpansionPanelDescription.ctorParameters = () => [];\nfunction MatExpansionPanelDescription_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatExpansionPanelDescription.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatExpansionPanelDescription.ctorParameters;\n}\n/**\n * <mat-panel-title> directive.\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\nexport class MatExpansionPanelTitle {\n}\nMatExpansionPanelTitle.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-panel-title',\n                host: {\n                    class: 'mat-expansion-panel-header-title'\n                }\n            },] },\n];\n/** @nocollapse */\nMatExpansionPanelTitle.ctorParameters = () => [];\nfunction MatExpansionPanelTitle_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatExpansionPanelTitle.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatExpansionPanelTitle.ctorParameters;\n}\n//# sourceMappingURL=expansion-panel-header.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { UNIQUE_SELECTION_DISPATCHER_PROVIDER } from \"@angular/cdk/collections\";\nimport { CdkAccordionModule } from \"@angular/cdk/accordion\";\nimport { A11yModule } from \"@angular/cdk/a11y\";\nimport { MatAccordion } from \"./accordion\";\nimport { MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelBase } from \"./expansion-panel\";\nimport { MatExpansionPanelDescription, MatExpansionPanelHeader, MatExpansionPanelTitle, } from \"./expansion-panel-header\";\nexport class MatExpansionModule {\n}\nMatExpansionModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, A11yModule, CdkAccordionModule],\n                exports: [\n                    MatAccordion,\n                    MatExpansionPanel,\n                    MatExpansionPanelActionRow,\n                    MatExpansionPanelHeader,\n                    MatExpansionPanelTitle,\n                    MatExpansionPanelDescription\n                ],\n                declarations: [\n                    MatExpansionPanelBase,\n                    MatAccordion,\n                    MatExpansionPanel,\n                    MatExpansionPanelActionRow,\n                    MatExpansionPanelHeader,\n                    MatExpansionPanelTitle,\n                    MatExpansionPanelDescription\n                ],\n                providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n            },] },\n];\n/** @nocollapse */\nMatExpansionModule.ctorParameters = () => [];\nfunction MatExpansionModule_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatExpansionModule.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatExpansionModule.ctorParameters;\n}\n//# sourceMappingURL=expansion-module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { MatExpansionModule } from \"./expansion-module\";\nexport { MatAccordion } from \"./accordion\";\nexport { EXPANSION_PANEL_ANIMATION_TIMING, MatExpansionPanelBase, _MatExpansionPanelMixinBase, MatExpansionPanel, MatExpansionPanelActionRow } from \"./expansion-panel\";\nexport { MatExpansionPanelHeader, MatExpansionPanelDescription, MatExpansionPanelTitle } from \"./expansion-panel-header\";\n//# sourceMappingURL=public-api.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { MatExpansionModule, MatAccordion, EXPANSION_PANEL_ANIMATION_TIMING, MatExpansionPanelBase, _MatExpansionPanelMixinBase, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelDescription, MatExpansionPanelTitle } from \"./public-api\";\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":"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"}
=======
{"version":3,"file":"expansion.js","sources":["../../../src/lib/expansion/index.ts","../../../src/lib/expansion/public-api.ts","../../../src/lib/expansion/expansion-module.ts","../../../src/lib/expansion/expansion-panel-header.ts","../../../src/lib/expansion/expansion-panel.ts","../../../src/lib/expansion/expansion-animations.ts","../../../src/lib/expansion/expansion-panel-content.ts","../../../src/lib/expansion/accordion.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './expansion-module';\nexport * from './accordion';\nexport * from './expansion-panel';\nexport * from './expansion-panel-header';\nexport * from './expansion-panel-content';\nexport * from './expansion-animations';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelActionRow\n} from './expansion-panel';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, A11yModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatExpansionPanel} from './expansion-panel';\nimport {matExpansionAnimations} from './expansion-animations';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs/Subject';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {matExpansionAnimations} from './expansion-animations';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MdAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n"],"names":[],"mappings":"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"}
>>>>>>> 80086fcc5df8b4668ad26f755b2927e01d42c9c2
