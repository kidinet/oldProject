<<<<<<< HEAD
{"version":3,"file":"material-select.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/select/select-errors.ts","../../src/lib/select/select.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  SPACE,\n  UP_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select has been opened. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   /** Event emitted when the select has been opened. */\n   @Output('opened')\n   get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /**\n   * Event emitted when the select has been opened.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the select has been closed.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onClose: Observable<void> = this._closedStream;\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event emitted when the selected value has been changed by the user.\n   * @deprecated Use `selectionChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly change: EventEmitter<MatSelectChange> = this.selectionChange;\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(this._getOptionIndex(option)!);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0])!);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const itemHeight = this._getItemHeight();\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.options, this.optionGroups);\n    const scrollOffset = (activeOptionIndex + labelCount) * itemHeight;\n    const panelTop = this.panel.nativeElement.scrollTop;\n\n    if (scrollOffset < panelTop) {\n      this.panel.nativeElement.scrollTop = scrollOffset;\n    } else if (scrollOffset + itemHeight > panelTop + SELECT_PANEL_MAX_HEIGHT) {\n      this.panel.nativeElement.scrollTop =\n          Math.max(0, scrollOffset - SELECT_PANEL_MAX_HEIGHT + itemHeight);\n    }\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += MatOption.countGroupLabelsBeforeOption(selectedOptionOffset,\n        this.options, this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldPlaceholderFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', [\n      style({\n        opacity: 0,\n        minWidth: '100%',\n        transform: 'scaleY(0)'\n      }),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ]),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","setPrototypeOf","__proto__","Array","p","hasOwnProperty","matSelectAnimations","transformPanel","trigger","state","style","opacity","minWidth","transform","transition","animate","fadeInContent","nextUniqueId","MAT_SELECT_SCROLL_STRATEGY","InjectionToken","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","MatSelectChange","source","value","MatSelectBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","type","Directive","args","selector","MatSelectTrigger","MatSelect","_super","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","_scrollStrategyFactory","_this","call","_panelOpen","_required","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","Subject","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimating","_scrollStrategy","_offsetY","_positions","originX","originY","overlayX","overlayY","focused","controlType","ariaLabel","optionSelectionChanges","defer","options","merge","apply","map","option","onSelectionChange","onStable","asObservable","pipe","take","switchMap","openedChange","EventEmitter","onOpen","_openedStream","onClose","_closedStream","selectionChange","change","valueChange","valueAccessor","parseInt","id","tslib_1.__extends","defineProperty","_placeholder","stateChanges","next","coerceBooleanProperty","_selectionModel","fn","_initializeSelection","_value","newValue","writeValue","_id","filter","o","ngOnInit","SelectionModel","multiple","undefined","ngAfterContentInit","_initKeyManager","changes","startWith","takeUntil","subscribe","_resetOptions","ngDoCheck","updateErrorState","ngOnChanges","ngOnDestroy","complete","toggle","panelOpen","close","open","disabled","length","_triggerRect","nativeElement","getBoundingClientRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","markForCheck","overlayDir","overlayRef","overlayElement","fontSize","_isRtl","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleKeydown","event","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","altKey","preventDefault","onKeydown","manager","HOME","END","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","emit","offsetX","_onFadeInDone","_onFocus","_onBlur","_onAttached","positionChange","detectChanges","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","Promise","resolve","then","isUserInput","isArray","_clearSelection","forEach","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","toArray","indexOf","find","error","isDevMode","console","warn","select","skip","clear","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","focus","_stateChanges","_setOptionIds","wasSelected","isSelected","_getOptionIndex","_propagateChanges","fallbackValue","valueToEmit","itemHeight","_getItemHeight","activeOptionIndex","labelCount","MatOption","countGroupLabelsBeforeOption","optionGroups","scrollOffset","panelTop","Math","max","reduce","result","current","index","items","_getItemCount","panelHeight","min","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","selectedIndex","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","ariaLabelledby","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_PADDING_X","first","group","leftOverflow","left","rightOverflow","right","width","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","height","maxOptionsDisplayed","floor","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","round","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","Component","exportAs","template","styles","inputs","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","host","role","[attr.id]","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-disabled]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","class","(keydown)","(focus)","(blur)","animations","providers","MatFormFieldControl","useExisting","MAT_OPTION_PARENT_COMPONENT","NgZone","ErrorStateMatcher","ElementRef","Directionality","decorators","Optional","NgForm","FormGroupDirective","MatFormField","NgControl","Self","Attribute","Inject","propDecorators","ViewChild","CdkConnectedOverlay","ContentChildren","descendants","MatOptgroup","panelClass","Input","customTrigger","ContentChild","required","compareWith","errorStateMatcher","Output","MatSelectModule","NgModule","imports","CommonModule","OverlayModule","MatOptionModule","MatCommonModule","exports","MatFormFieldModule","declarations"],"mappings":"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"}
=======
<<<<<<< HEAD
{"version":3,"sources":["/home/travis/build/angular/material2/dist/bundles/material-select.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","material","select","core","common","cdk","a11y","bidi","coercion","collections","keycodes","overlay","Rx","operators","forms","formField","Observable","animations","this","_angular_core","_angular_common","_angular_cdk_a11y","_angular_cdk_bidi","_angular_cdk_coercion","_angular_cdk_collections","_angular_cdk_keycodes","_angular_cdk_overlay","rxjs_operators_filter","rxjs_operators_take","rxjs_operators_map","rxjs_operators_startWith","rxjs_operators_takeUntil","_angular_forms","_angular_material_core","_angular_material_formField","rxjs_Observable","rxjs_observable_merge","rxjs_Subject","_angular_animations","__extends","d","b","__","constructor","extendStatics","prototype","Object","create","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","scrollStrategies","reposition","setPrototypeOf","__proto__","Array","p","hasOwnProperty","transformPanel","trigger","state","style","opacity","minWidth","transform","transition","animate","fadeInContent","nextUniqueId","MAT_SELECT_SCROLL_STRATEGY","InjectionToken","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","MatSelectChange","source","value","MatSelectBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinTabIndex","mixinDisabled","mixinErrorState","MatSelectTrigger","decorators","type","Directive","args","selector","ctorParameters","MatSelect","_super","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","_scrollStrategyFactory","_this","call","_panelOpen","_required","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","Subject","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimating","_scrollStrategy","_offsetY","_positions","originX","originY","overlayX","overlayY","focused","controlType","_disableRipple","ariaLabel","openedChange","EventEmitter","onOpen","_openedStream","onClose","_closedStream","selectionChange","change","valueChange","valueAccessor","parseInt","id","defineProperty","get","_placeholder","set","stateChanges","next","enumerable","configurable","coerceBooleanProperty","_selectionModel","fn","_initializeSelection","_value","newValue","writeValue","_id","merge","apply","options","map","option","onSelectionChange","pipe","filter","o","ngOnInit","SelectionModel","multiple","undefined","ngAfterContentInit","_initKeyManager","changes","startWith","takeUntil","subscribe","_resetOptions","ngDoCheck","updateErrorState","ngOnChanges","ngOnDestroy","complete","toggle","panelOpen","close","open","disabled","length","_triggerRect","nativeElement","getBoundingClientRect","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","markForCheck","onStable","asObservable","take","overlayDir","overlayRef","overlayElement","fontSize","focus","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","empty","selectedOptions","viewValue","_isRtl","reverse","join","_handleKeydown","event","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","ENTER","SPACE","preventDefault","_keyManager","onKeydown","HOME","END","setFirstItemActive","setLastItemActive","activeItem","_selectViaInteraction","_onPanelDone","emit","offsetX","_onFadeInDone","_onFocus","_onBlur","_onAttached","positionChange","detectChanges","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","Promise","resolve","then","isUserInput","isArray","_clearSelection","forEach","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","toArray","indexOf","find","error","isDevMode","console","warn","skip","clear","deselect","ActiveDescendantKeyManager","withTypeAhead","tabOut","_scrollActiveOptionIntoView","optionSelectionChanges","_onSelect","_setOptionIds","wasSelected","isSelected","_propagateChanges","fallbackValue","valueToEmit","_getOptionIndex","itemHeight","_getItemHeight","activeOptionIndex","activeItemIndex","labelCount","MatOption","countGroupLabelsBeforeOption","optionGroups","scrollOffset","panelTop","Math","max","reduce","result","current","index","items","_getItemCount","panelHeight","min","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","selectedIndex","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","ariaLabelledby","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_PADDING_X","first","group","leftOverflow","left","rightOverflow","right","width","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","height","maxOptionsDisplayed","floor","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","round","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","Component","exportAs","template","styles","inputs","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","host","role","[attr.id]","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-disabled]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","class","(keydown)","(focus)","(blur)","providers","MatFormFieldControl","useExisting","MAT_OPTION_PARENT_COMPONENT","ViewportRuler","ChangeDetectorRef","NgZone","ErrorStateMatcher","ElementRef","Directionality","Optional","NgForm","FormGroupDirective","MatFormField","NgControl","Self","Attribute","Inject","propDecorators","ViewChild","CdkConnectedOverlay","ContentChildren","descendants","MatOptgroup","panelClass","Input","customTrigger","ContentChild","required","compareWith","disableRipple","errorStateMatcher","Output","MatSelectModule","NgModule","imports","CommonModule","OverlayModule","MatOptionModule","MatCommonModule","MatFormFieldModule","declarations","SELECT_PANEL_MAX_HEIGHT","SELECT_PANEL_INDENT_PADDING_X","SELECT_ITEM_HEIGHT_EM","SELECT_PANEL_VIEWPORT_PADDING"],"mappings":"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","file":"/home/travis/build/angular/material2/dist/bundles/material-select.umd.min.js"}
=======
{"version":3,"file":"material-select.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/select/select-errors.ts","../../src/lib/select/select.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  SPACE,\n  UP_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select has been opened. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   /** Event emitted when the select has been opened. */\n   @Output('opened')\n   get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /**\n   * Event emitted when the select has been opened.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the select has been closed.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onClose: Observable<void> = this._closedStream;\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event emitted when the selected value has been changed by the user.\n   * @deprecated Use `selectionChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly change: EventEmitter<MatSelectChange> = this.selectionChange;\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(this._getOptionIndex(option)!);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0])!);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const itemHeight = this._getItemHeight();\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.options, this.optionGroups);\n    const scrollOffset = (activeOptionIndex + labelCount) * itemHeight;\n    const panelTop = this.panel.nativeElement.scrollTop;\n\n    if (scrollOffset < panelTop) {\n      this.panel.nativeElement.scrollTop = scrollOffset;\n    } else if (scrollOffset + itemHeight > panelTop + SELECT_PANEL_MAX_HEIGHT) {\n      this.panel.nativeElement.scrollTop =\n          Math.max(0, scrollOffset - SELECT_PANEL_MAX_HEIGHT + itemHeight);\n    }\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += MatOption.countGroupLabelsBeforeOption(selectedOptionOffset,\n        this.options, this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldPlaceholderFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', [\n      style({\n        opacity: 0,\n        minWidth: '100%',\n        transform: 'scaleY(0)'\n      }),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ]),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","setPrototypeOf","__proto__","Array","p","hasOwnProperty","matSelectAnimations","transformPanel","trigger","state","style","opacity","minWidth","transform","transition","animate","fadeInContent","nextUniqueId","MAT_SELECT_SCROLL_STRATEGY","InjectionToken","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","MatSelectChange","source","value","MatSelectBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","type","Directive","args","selector","MatSelectTrigger","MatSelect","_super","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","_scrollStrategyFactory","_this","call","_panelOpen","_required","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","Subject","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimating","_scrollStrategy","_offsetY","_positions","originX","originY","overlayX","overlayY","focused","controlType","ariaLabel","optionSelectionChanges","defer","options","merge","apply","map","option","onSelectionChange","onStable","asObservable","pipe","take","switchMap","openedChange","EventEmitter","onOpen","_openedStream","onClose","_closedStream","selectionChange","change","valueChange","valueAccessor","parseInt","id","tslib_1.__extends","defineProperty","_placeholder","stateChanges","next","coerceBooleanProperty","_selectionModel","fn","_initializeSelection","_value","newValue","writeValue","_id","filter","o","ngOnInit","SelectionModel","multiple","undefined","ngAfterContentInit","_initKeyManager","changes","startWith","takeUntil","subscribe","_resetOptions","ngDoCheck","updateErrorState","ngOnChanges","ngOnDestroy","complete","toggle","panelOpen","close","open","disabled","length","_triggerRect","nativeElement","getBoundingClientRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","markForCheck","overlayDir","overlayRef","overlayElement","fontSize","_isRtl","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleKeydown","event","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","altKey","preventDefault","onKeydown","manager","HOME","END","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","emit","offsetX","_onFadeInDone","_onFocus","_onBlur","_onAttached","positionChange","detectChanges","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","Promise","resolve","then","isUserInput","isArray","_clearSelection","forEach","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","toArray","indexOf","find","error","isDevMode","console","warn","select","skip","clear","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","focus","_stateChanges","_setOptionIds","wasSelected","isSelected","_getOptionIndex","_propagateChanges","fallbackValue","valueToEmit","itemHeight","_getItemHeight","activeOptionIndex","labelCount","MatOption","countGroupLabelsBeforeOption","optionGroups","scrollOffset","panelTop","Math","max","reduce","result","current","index","items","_getItemCount","panelHeight","min","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","selectedIndex","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","ariaLabelledby","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_PADDING_X","first","group","leftOverflow","left","rightOverflow","right","width","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","height","maxOptionsDisplayed","floor","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","round","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","Component","exportAs","template","styles","inputs","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","host","role","[attr.id]","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-disabled]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","class","(keydown)","(focus)","(blur)","animations","providers","MatFormFieldControl","useExisting","MAT_OPTION_PARENT_COMPONENT","NgZone","ErrorStateMatcher","ElementRef","Directionality","decorators","Optional","NgForm","FormGroupDirective","MatFormField","NgControl","Self","Attribute","Inject","propDecorators","ViewChild","CdkConnectedOverlay","ContentChildren","descendants","MatOptgroup","panelClass","Input","customTrigger","ContentChild","required","compareWith","errorStateMatcher","Output","MatSelectModule","NgModule","imports","CommonModule","OverlayModule","MatOptionModule","MatCommonModule","exports","MatFormFieldModule","declarations"],"mappings":"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"}
>>>>>>> 80086fcc5df8b4668ad26f755b2927e01d42c9c2
>>>>>>> 710ca7a32c33c7087359b3eab676d00da88e00fa
